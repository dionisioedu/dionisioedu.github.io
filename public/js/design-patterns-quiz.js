/* design-patterns-quiz.js  – 100 perguntas, 10 aleatórias por rodada */

/* ------------------ BANCO DE PERGUNTAS (100) ------------------ */
/* Formato: { q:'pergunta', o:['A','B','C','D'], c: índice da correta } */
const POOL = [
  {q:"O padrão <strong>Singleton</strong> pertence a qual categoria GoF?", o:["Criacional","Estrutural","Comportamental"]},
  {q:"Qual é a intenção principal do padrão <em>Singleton</em>?", o:["Garantir que uma classe tenha somente uma instância globalmente acessível.","Converter interface de uma classe em outra interface esperada.","Alterar comportamento quando estado muda.","Separar construção de objeto complexo da representação."]},
  {q:"Selecione o cenário que melhor justifica <strong>Singleton</strong>:", o:["Gerenciar um pool único de conexões ao banco","Método `submitOrder()` que coordena múltiplos serviços","Duplicar inimigos em jogo mantendo atributos únicos","Janela de diálogo coordenando widgets"]},
  {q:"Qual benefício caracteriza o padrão <em>Singleton</em>?", o:["Economiza recursos evitando múltiplas instâncias","Unifica travessia de coleções","Reduz acoplamento muitos‑para‑muitos","Reutiliza fluxo comum evitando duplicação"]},
  {q:"Qual padrão é definido como: \"<em>Garantir que uma classe tenha somente uma instância globalmente acessível.</em>\"?", o:["Singleton","Command","Composite","Prototype"]},
  {q:"Qual padrão é MAIS adequado ao cenário: \"Gerenciar um pool único de conexões ao banco\"?", o:["Singleton","Mediator","Factory Method","Command"]},
  {q:"O padrão <strong>Factory Method</strong> pertence a qual categoria GoF?", o:["Criacional","Estrutural","Comportamental"]},
  {q:"Qual é a intenção principal do padrão <em>Factory Method</em>?", o:["Definir uma interface para criar um objeto, deixando subclasses decidir instância.","Interpretar sentenças em linguagem formal definida.","Encapsular família de algoritmos intercambiáveis.","Garantir que uma classe tenha somente uma instância globalmente acessível."]},
  {q:"Selecione o cenário que melhor justifica <strong>Factory Method</strong>:", o:["Criar documentos PDF ou HTML dinamicamente","Percorrer lista personalizada","Método `submitOrder()` que coordena múltiplos serviços","Adicionar compressão e criptografia a fluxo"]},
  {q:"Qual benefício caracteriza o padrão <em>Factory Method</em>?", o:["Reduz acoplamento a classes concretas","Elimina condicionais complexas","Cria objetos sem depender de classes concretas","Adiciona lazy loading, segurança ou log"]},
  {q:"Qual padrão é definido como: \"<em>Definir uma interface para criar um objeto, deixando subclasses decidir instância.</em>\"?", o:["Factory Method","Singleton","Template Method","Observer"]},
  {q:"Qual padrão é MAIS adequado ao cenário: \"Criar documentos PDF ou HTML dinamicamente\"?", o:["Factory Method","Singleton","Command","Visitor"]},
  {q:"O padrão <strong>Abstract Factory</strong> pertence a qual categoria GoF?", o:["Criacional","Estrutural","Comportamental"]},
  {q:"Qual é a intenção principal do padrão <em>Abstract Factory</em>?", o:["Fornecer interface para criar famílias de objetos relacionados.","Compor objetos em estruturas árvore para parte‑todo.","Interpretar sentenças em linguagem formal definida.","Garantir que uma classe tenha somente uma instância globalmente acessível."]},
  {q:"Selecione o cenário que melhor justifica <strong>Abstract Factory</strong>:", o:["Criar kits de UI consistentes para temas claro e escuro","Checkpoint de jogo","Adicionar compressão e criptografia a fluxo","Percorrer lista personalizada"]},
  {q:"Qual benefício caracteriza o padrão <em>Abstract Factory</em>?", o:["Garante consistência entre objetos de uma família","Reduz acoplamento muitos‑para‑muitos","Implementa comunicação reativa","Extensão flexível sem herança explosiva"]},
  {q:"Qual padrão é definido como: \"<em>Fornecer interface para criar famílias de objetos relacionados.</em>\"?", o:["Abstract Factory","Chain of Responsibility","Decorator","Visitor"]},
  {q:"Qual padrão é MAIS adequado ao cenário: \"Criar kits de UI consistentes para temas claro e escuro\"?", o:["Abstract Factory","Decorator","Iterator","Flyweight"]},
  {q:"O padrão <strong>Builder</strong> pertence a qual categoria GoF?", o:["Criacional","Estrutural","Comportamental"]},
  {q:"Qual é a intenção principal do padrão <em>Builder</em>?", o:["Separar construção de objeto complexo da representação.","Garantir que uma classe tenha somente uma instância globalmente acessível.","Interpretar sentenças em linguagem formal definida.","Notificar dependentes automaticamente em mudança."]},
  {q:"Selecione o cenário que melhor justifica <strong>Builder</strong>:", o:["Construir relatório com várias seções configuráveis","Classe de jogo com etapas fixas","Duplicar inimigos em jogo mantendo atributos únicos","Controle remoto abstrato vs dispositivos concretos"]},
  {q:"Qual benefício caracteriza o padrão <em>Builder</em>?", o:["Permite construir diferentes representações passo‑a‑passo","Reutiliza fluxo comum evitando duplicação","Reduz consumo de memória em massa de objetos","Cria objetos sem depender de classes concretas"]},
  {q:"Qual padrão é definido como: \"<em>Separar construção de objeto complexo da representação.</em>\"?", o:["Builder","Proxy","Memento","Interpreter"]},
  {q:"Qual padrão é MAIS adequado ao cenário: \"Construir relatório com várias seções configuráveis\"?", o:["Builder","Memento","Visitor","Composite"]},
  {q:"O padrão <strong>Prototype</strong> pertence a qual categoria GoF?", o:["Criacional","Estrutural","Comportamental"]},
  {q:"Qual é a intenção principal do padrão <em>Prototype</em>?", o:["Criar novos objetos clonando um protótipo existente.","Compartilhar objetos finos para economizar memória.","Alterar comportamento quando estado muda.","Encapsular interações entre objetos colegas."]},
  {q:"Selecione o cenário que melhor justifica <strong>Prototype</strong>:", o:["Duplicar inimigos em jogo mantendo atributos únicos","Checkpoint de jogo","Editor de texto com desfazer","Player de mídia play/pause/stop"]},
  {q:"Qual benefício caracteriza o padrão <em>Prototype</em>?", o:["Cria objetos sem depender de classes concretas","Reduz acoplamento a classes concretas","Reduz acoplamento muitos‑para‑muitos","Extensão flexível sem herança explosiva"]},
  {q:"Qual padrão é definido como: \"<em>Criar novos objetos clonando um protótipo existente.</em>\"?", o:["Prototype","Command","Interpreter","Visitor"]},
  {q:"Qual padrão é MAIS adequado ao cenário: \"Duplicar inimigos em jogo mantendo atributos únicos\"?", o:["Prototype","Bridge","Chain of Responsibility","Observer"]},
  {q:"O padrão <strong>Adapter</strong> pertence a qual categoria GoF?", o:["Estrutural","Criacional","Comportamental"]},
  {q:"Qual é a intenção principal do padrão <em>Adapter</em>?", o:["Converter interface de uma classe em outra interface esperada.","Adicionar operação a elementos sem alterar classes.","Passar pedido por corrente de handlers até tratado.","Fornecer interface para criar famílias de objetos relacionados."]},
  {q:"Selecione o cenário que melhor justifica <strong>Adapter</strong>:", o:["Conectar nova API JSON a cliente que espera XML","Percorrer lista personalizada","Exportar árvore de nós para XML","Checkpoint de jogo"]},
  {q:"Qual benefício caracteriza o padrão <em>Adapter</em>?", o:["Reutiliza código legado sem modificá‑lo","Permite construir diferentes representações passo‑a‑passo","Permite evolução independente de hierarquias","Preserva encapsulamento ao salvar estado"]},
  {q:"Qual padrão é definido como: \"<em>Converter interface de uma classe em outra interface esperada.</em>\"?", o:["Adapter","Command","Chain of Responsibility","Mediator"]},
  {q:"Qual padrão é MAIS adequado ao cenário: \"Conectar nova API JSON a cliente que espera XML\"?", o:["Adapter","Singleton","Mediator","Factory Method"]},
  {q:"O padrão <strong>Bridge</strong> pertence a qual categoria GoF?", o:["Estrutural","Criacional","Comportamental"]},
  {q:"Qual é a intenção principal do padrão <em>Bridge</em>?", o:["Desacoplar abstração da implementação para variar independentemente.","Compartilhar objetos finos para economizar memória.","Encapsular família de algoritmos intercambiáveis.","Alterar comportamento quando estado muda."]},
  {q:"Selecione o cenário que melhor justifica <strong>Bridge</strong>:", o:["Controle remoto abstrato vs dispositivos concretos","Player de mídia play/pause/stop","Editor de texto com desfazer","Classe de jogo com etapas fixas"]},
  {q:"Qual benefício caracteriza o padrão <em>Bridge</em>?", o:["Permite evolução independente de hierarquias","Reutiliza código legado sem modificá‑lo","Preserva encapsulamento ao salvar estado","Extensão flexível sem herança explosiva"]},
  {q:"Qual padrão é definido como: \"<em>Desacoplar abstração da implementação para variar independentemente.</em>\"?", o:["Bridge","Singleton","Composite","Observer"]},
  {q:"Qual padrão é MAIS adequado ao cenário: \"Controle remoto abstrato vs dispositivos concretos\"?", o:["Bridge","Observer","Decorator","Command"]},
  {q:"O padrão <strong>Composite</strong> pertence a qual categoria GoF?", o:["Estrutural","Criacional","Comportamental"]},
  {q:"Qual é a intenção principal do padrão <em>Composite</em>?", o:["Compor objetos em estruturas árvore para parte‑todo.","Capturar estado interno para restaurar depois.","Passar pedido por corrente de handlers até tratado.","Alterar comportamento quando estado muda."]},
  {q:"Selecione o cenário que melhor justifica <strong>Composite</strong>:", o:["Menu com submenus e itens","Middleware HTTP que encadeia validações","Percorrer lista personalizada","Método `submitOrder()` que coordena múltiplos serviços"]},
  {q:"Qual benefício caracteriza o padrão <em>Composite</em>?", o:["Trata objetos individuais e composições uniformemente","Separa algoritmos da estrutura de objetos","Implementa comunicação reativa","Escolha algoritmo em runtime"]},
  {q:"Qual padrão é definido como: \"<em>Compor objetos em estruturas árvore para parte‑todo.</em>\"?", o:["Composite","Singleton","Command","Memento"]},
  {q:"Qual padrão é MAIS adequado ao cenário: \"Menu com submenus e itens\"?", o:["Composite","Prototype","Memento","Observer"]},
  {q:"O padrão <strong>Decorator</strong> pertence a qual categoria GoF?", o:["Estrutural","Criacional","Comportamental"]},
  {q:"Qual é a intenção principal do padrão <em>Decorator</em>?", o:["Adicionar responsabilidades a objeto dinamicamente.","Desacoplar abstração da implementação para variar independentemente.","Interpretar sentenças em linguagem formal definida.","Definir uma interface para criar um objeto, deixando subclasses decidir instância."]},
  {q:"Selecione o cenário que melhor justifica <strong>Decorator</strong>:", o:["Adicionar compressão e criptografia a fluxo","Janela de diálogo coordenando widgets","Middleware HTTP que encadeia validações","Player de mídia play/pause/stop"]},
  {q:"Qual benefício caracteriza o padrão <em>Decorator</em>?", o:["Extensão flexível sem herança explosiva","Implementa comunicação reativa","Permite evolução independente de hierarquias","Preserva encapsulamento ao salvar estado"]},
  {q:"Qual padrão é definido como: \"<em>Adicionar responsabilidades a objeto dinamicamente.</em>\"?", o:["Decorator","Interpreter","Mediator","Chain of Responsibility"]},
  {q:"Qual padrão é MAIS adequado ao cenário: \"Adicionar compressão e criptografia a fluxo\"?", o:["Decorator","Interpreter","Chain of Responsibility","Singleton"]},
  {q:"O padrão <strong>Facade</strong> pertence a qual categoria GoF?", o:["Estrutural","Criacional","Comportamental"]},
  {q:"Qual é a intenção principal do padrão <em>Facade</em>?", o:["Fornecer interface simplificada a subsistema complexo.","Notificar dependentes automaticamente em mudança.","Encapsular família de algoritmos intercambiáveis.","Substituir ou controlar acesso a objeto."]},
  {q:"Selecione o cenário que melhor justifica <strong>Facade</strong>:", o:["Método `submitOrder()` que coordena múltiplos serviços","Percorrer lista personalizada","Ordenação adaptativa escolhendo QuickSort ou MergeSort","Gerenciar um pool único de conexões ao banco"]},
  {q:"Qual benefício caracteriza o padrão <em>Facade</em>?", o:["Reduz acoplamento do cliente ao subsistema","Trata objetos individuais e composições uniformemente","Reutiliza fluxo comum evitando duplicação","Reutiliza código legado sem modificá‑lo"]},
  {q:"Qual padrão é definido como: \"<em>Fornecer interface simplificada a subsistema complexo.</em>\"?", o:["Facade","Observer","State","Adapter"]},
  {q:"Qual padrão é MAIS adequado ao cenário: \"Método `submitOrder()` que coordena múltiplos serviços\"?", o:["Facade","Abstract Factory","Observer","Decorator"]},
  {q:"O padrão <strong>Flyweight</strong> pertence a qual categoria GoF?", o:["Estrutural","Criacional","Comportamental"]},
  {q:"Qual é a intenção principal do padrão <em>Flyweight</em>?", o:["Compartilhar objetos finos para economizar memória.","Definir uma interface para criar um objeto, deixando subclasses decidir instância.","Adicionar operação a elementos sem alterar classes.","Fornecer interface para criar famílias de objetos relacionados."]},
  {q:"Selecione o cenário que melhor justifica <strong>Flyweight</strong>:", o:["Renderizar milhões de caracteres de texto","Criar kits de UI consistentes para temas claro e escuro","Gerenciar um pool único de conexões ao banco","Percorrer lista personalizada"]},
  {q:"Qual benefício caracteriza o padrão <em>Flyweight</em>?", o:["Reduz consumo de memória em massa de objetos","Economiza recursos evitando múltiplas instâncias","Extensão flexível sem herança explosiva","Trata objetos individuais e composições uniformemente"]},
  {q:"Qual padrão é definido como: \"<em>Compartilhar objetos finos para economizar memória.</em>\"?", o:["Flyweight","Decorator","Builder","Strategy"]},
  {q:"Qual padrão é MAIS adequado ao cenário: \"Renderizar milhões de caracteres de texto\"?", o:["Flyweight","Adapter","Chain of Responsibility","Facade"]},
  {q:"O padrão <strong>Proxy</strong> pertence a qual categoria GoF?", o:["Estrutural","Criacional","Comportamental"]},
  {q:"Qual é a intenção principal do padrão <em>Proxy</em>?", o:["Substituir ou controlar acesso a objeto.","Fornecer interface para criar famílias de objetos relacionados.","Converter interface de uma classe em outra interface esperada.","Adicionar responsabilidades a objeto dinamicamente."]},
  {q:"Selecione o cenário que melhor justifica <strong>Proxy</strong>:", o:["Imagem carregada sob demanda","Checkpoint de jogo","Conectar nova API JSON a cliente que espera XML","Exportar árvore de nós para XML"]},
  {q:"Qual benefício caracteriza o padrão <em>Proxy</em>?", o:["Adiciona lazy loading, segurança ou log","Extensão flexível sem herança explosiva","Reutiliza fluxo comum evitando duplicação","Reduz acoplamento do cliente ao subsistema"]},
  {q:"Qual padrão é definido como: \"<em>Substituir ou controlar acesso a objeto.</em>\"?", o:["Proxy","Iterator","Flyweight","Mediator"]},
  {q:"Qual padrão é MAIS adequado ao cenário: \"Imagem carregada sob demanda\"?", o:["Proxy","Mediator","Builder","Singleton"]},
  {q:"O padrão <strong>Chain of Responsibility</strong> pertence a qual categoria GoF?", o:["Comportamental","Criacional","Estrutural"]},
  {q:"Qual é a intenção principal do padrão <em>Chain of Responsibility</em>?", o:["Passar pedido por corrente de handlers até tratado.","Fornecer interface simplificada a subsistema complexo.","Encapsular solicitação como objeto.","Compartilhar objetos finos para economizar memória."]},
  {q:"Selecione o cenário que melhor justifica <strong>Chain of Responsibility</strong>:", o:["Middleware HTTP que encadeia validações","Parser de expressões matemáticas simples","Controle remoto abstrato vs dispositivos concretos","Adicionar compressão e criptografia a fluxo"]},
  {q:"Qual benefício caracteriza o padrão <em>Chain of Responsibility</em>?", o:["Desacopla remetente do tratamento","Permite construir diferentes representações passo‑a‑passo","Extensão flexível sem herança explosiva","Preserva encapsulamento ao salvar estado"]},
  {q:"Qual padrão é definido como: \"<em>Passar pedido por corrente de handlers até tratado.</em>\"?", o:["Chain of Responsibility","Bridge","Strategy","Interpreter"]},
  {q:"Qual padrão é MAIS adequado ao cenário: \"Middleware HTTP que encadeia validações\"?", o:["Chain of Responsibility","Singleton","Composite","Command"]},
  {q:"O padrão <strong>Command</strong> pertence a qual categoria GoF?", o:["Comportamental","Criacional","Estrutural"]},
  {q:"Qual é a intenção principal do padrão <em>Command</em>?", o:["Encapsular solicitação como objeto.","Criar novos objetos clonando um protótipo existente.","Definir uma interface para criar um objeto, deixando subclasses decidir instância.","Converter interface de uma classe em outra interface esperada."]},
  {q:"Selecione o cenário que melhor justifica <strong>Command</strong>:", o:["Editor de texto com desfazer","Percorrer lista personalizada","Checkpoint de jogo","Exportar árvore de nós para XML"]},
  {q:"Qual benefício caracteriza o padrão <em>Command</em>?", o:["Permite filas, logs, undo/redo","Facilita extensão de DSLs","Implementa comunicação reativa","Trata objetos individuais e composições uniformemente"]},
  {q:"Qual padrão é definido como: \"<em>Encapsular solicitação como objeto.</em>\"?", o:["Command","Template Method","Memento","Iterator"]},
  {q:"Qual padrão é MAIS adequado ao cenário: \"Editor de texto com desfazer\"?", o:["Command","Composite","Memento","Template Method"]},
  {q:"O padrão <strong>Interpreter</strong> pertence a qual categoria GoF?", o:["Comportamental","Criacional","Estrutural"]},
  {q:"Qual é a intenção principal do padrão <em>Interpreter</em>?", o:["Interpretar sentenças em linguagem formal definida.","Garantir que uma classe tenha somente uma instância globalmente acessível.","Passar pedido por corrente de handlers até tratado.","Adicionar operação a elementos sem alterar classes."]},
  {q:"Selecione o cenário que melhor justifica <strong>Interpreter</strong>:", o:["Parser de expressões matemáticas simples","Player de mídia play/pause/stop","Renderizar milhões de caracteres de texto","Exportar árvore de nós para XML"]},
  {q:"Qual benefício caracteriza o padrão <em>Interpreter</em>?", o:["Facilita extensão de DSLs","Reutiliza fluxo comum evitando duplicação","Permite filas, logs, undo/redo","Reduz acoplamento a classes concretas"]},
  {q:"Qual padrão é definido como: \"<em>Interpretar sentenças em linguagem formal definida.</em>\"?", o:["Interpreter","Facade","Prototype","Bridge"]},
  {q:"Qual padrão é MAIS adequado ao cenário: \"Parser de expressões matemáticas simples\"?", o:["Interpreter","Factory Method","Facade","Abstract Factory"]},
  {q:"O padrão <strong>Iterator</strong> pertence a qual categoria GoF?", o:["Comportamental","Criacional","Estrutural"]},
  {q:"Qual é a intenção principal do padrão <em>Iterator</em>?", o:["Acessar elementos sequencialmente sem expor estrutura.","Fornecer interface para criar famílias de objetos relacionados.","Fornecer interface simplificada a subsistema complexo.","Converter interface de uma classe em outra interface esperada."]},
  {q:"Selecione o cenário que melhor justifica <strong>Iterator</strong>:", o:["Percorrer lista personalizada","Editor de texto com desfazer","Player de mídia play/pause/stop","Adicionar compressão e criptografia a fluxo"]},
  {q:"Qual benefício caracteriza o padrão <em>Iterator</em>?", o:["Unifica travessia de coleções","Cria objetos sem depender de classes concretas","Economiza recursos evitando múltiplas instâncias","Implementa comunicação reativa"]},
  {q:"Qual padrão é definido como: \"<em>Acessar elementos sequencialmente sem expor estrutura.</em>\"?", o:["Iterator","Factory Method","State","Bridge"]},
  {q:"Qual padrão é MAIS adequado ao cenário: \"Percorrer lista personalizada\"?", o:["Iterator","State","Interpreter","Adapter"]},
  {q:"O padrão <strong>Mediator</strong> pertence a qual categoria GoF?", o:["Comportamental","Criacional","Estrutural"]},
  {q:"Qual é a intenção principal do padrão <em>Mediator</em>?", o:["Encapsular interações entre objetos colegas.","Encapsular família de algoritmos intercambiáveis.","Capturar estado interno para restaurar depois.","Definir uma interface para criar um objeto, deixando subclasses decidir instância."]},
  {q:"Selecione o cenário que melhor justifica <strong>Mediator</strong>:", o:["Janela de diálogo coordenando widgets","Middleware HTTP que encadeia validações","Controle remoto abstrato vs dispositivos concretos","Imagem carregada sob demanda"]},
  {q:"Qual benefício caracteriza o padrão <em>Mediator</em>?", o:["Reduz acoplamento muitos‑para‑muitos","Permite construir diferentes representações passo‑a‑passo","Permite evolução independente de hierarquias","Elimina condicionais complexas"]},
  {q:"Qual padrão é definido como: \"<em>Encapsular interações entre objetos colegas.</em>\"?", o:["Mediator","Visitor","Command","State"]},
  {q:"Qual padrão é MAIS adequado ao cenário: \"Janela de diálogo coordenando widgets\"?", o:["Mediator","Bridge","Iterator","Builder"]},
  {q:"O padrão <strong>Memento</strong> pertence a qual categoria GoF?", o:["Comportamental","Criacional","Estrutural"]},
  {q:"Qual é a intenção principal do padrão <em>Memento</em>?", o:["Capturar estado interno para restaurar depois.","Adicionar operação a elementos sem alterar classes.","Passar pedido por corrente de handlers até tratado.","Fornecer interface simplificada a subsistema complexo."]},
  {q:"Selecione o cenário que melhor justifica <strong>Memento</strong>:", o:["Checkpoint de jogo","Janela de diálogo coordenando widgets","Percorrer lista personalizada","Gerenciar um pool único de conexões ao banco"]},
  {q:"Qual benefício caracteriza o padrão <em>Memento</em>?", o:["Preserva encapsulamento ao salvar estado","Reduz consumo de memória em massa de objetos","Escolha algoritmo em runtime","Desacopla remetente do tratamento"]},
  {q:"Qual padrão é definido como: \"<em>Capturar estado interno para restaurar depois.</em>\"?", o:["Memento","Facade","Singleton","Adapter"]},
  {q:"Qual padrão é MAIS adequado ao cenário: \"Checkpoint de jogo\"?", o:["Memento","Bridge","Flyweight","State"]},
  {q:"O padrão <strong>Observer</strong> pertence a qual categoria GoF?", o:["Comportamental","Criacional","Estrutural"]},
  {q:"Qual é a intenção principal do padrão <em>Observer</em>?", o:["Notificar dependentes automaticamente em mudança.","Criar novos objetos clonando um protótipo existente.","Compartilhar objetos finos para economizar memória.","Encapsular solicitação como objeto."]},
  {q:"Selecione o cenário que melhor justifica <strong>Observer</strong>:", o:["Painel de cotações de ações","Controle remoto abstrato vs dispositivos concretos","Adicionar compressão e criptografia a fluxo","Exportar árvore de nós para XML"]},
  {q:"Qual benefício caracteriza o padrão <em>Observer</em>?", o:["Implementa comunicação reativa","Permite construir diferentes representações passo‑a‑passo","Desacopla remetente do tratamento","Preserva encapsulamento ao salvar estado"]},
  {q:"Qual padrão é definido como: \"<em>Notificar dependentes automaticamente em mudança.</em>\"?", o:["Observer","Proxy","Visitor","Memento"]},
  {q:"Qual padrão é MAIS adequado ao cenário: \"Painel de cotações de ações\"?", o:["Observer","Iterator","Memento","Composite"]},
  {q:"O padrão <strong>State</strong> pertence a qual categoria GoF?", o:["Comportamental","Criacional","Estrutural"]},
  {q:"Qual é a intenção principal do padrão <em>State</em>?", o:["Alterar comportamento quando estado muda.","Fornecer interface para criar famílias de objetos relacionados.","Definir uma interface para criar um objeto, deixando subclasses decidir instância.","Criar novos objetos clonando um protótipo existente."]},
  {q:"Selecione o cenário que melhor justifica <strong>State</strong>:", o:["Player de mídia play/pause/stop","Conectar nova API JSON a cliente que espera XML","Checkpoint de jogo","Controle remoto abstrato vs dispositivos concretos"]},
  {q:"Qual benefício caracteriza o padrão <em>State</em>?", o:["Elimina condicionais complexas","Extensão flexível sem herança explosiva","Reduz consumo de memória em massa de objetos","Escolha algoritmo em runtime"]},
  {q:"Qual padrão é definido como: \"<em>Alterar comportamento quando estado muda.</em>\"?", o:["State","Mediator","Decorator","Proxy"]},
  {q:"Qual padrão é MAIS adequado ao cenário: \"Player de mídia play/pause/stop\"?", o:["State","Flyweight","Builder","Facade"]},
  {q:"O padrão <strong>Strategy</strong> pertence a qual categoria GoF?", o:["Comportamental","Criacional","Estrutural"]},
  {q:"Qual é a intenção principal do padrão <em>Strategy</em>?", o:["Encapsular família de algoritmos intercambiáveis.","Compor objetos em estruturas árvore para parte‑todo.","Alterar comportamento quando estado muda.","Acessar elementos sequencialmente sem expor estrutura."]},
  {q:"Selecione o cenário que melhor justifica <strong>Strategy</strong>:", o:["Ordenação adaptativa escolhendo QuickSort ou MergeSort","Duplicar inimigos em jogo mantendo atributos únicos","Painel de cotações de ações","Checkpoint de jogo"]},
  {q:"Qual benefício caracteriza o padrão <em>Strategy</em>?", o:["Escolha algoritmo em runtime","Permite construir diferentes representações passo‑a‑passo","Reduz consumo de memória em massa de objetos","Reduz acoplamento a classes concretas"]},
  {q:"Qual padrão é definido como: \"<em>Encapsular família de algoritmos intercambiáveis.</em>\"?", o:["Strategy","Command","Abstract Factory","Chain of Responsibility"]},
  {q:"Qual padrão é MAIS adequado ao cenário: \"Ordenação adaptativa escolhendo QuickSort ou MergeSort\"?", o:["Strategy","Prototype","Flyweight","Builder"]},
  {q:"O padrão <strong>Template Method</strong> pertence a qual categoria GoF?", o:["Comportamental","Criacional","Estrutural"]},
  {q:"Qual é a intenção principal do padrão <em>Template Method</em>?", o:["Definir esqueleto de algoritmo delegando passos.","Alterar comportamento quando estado muda.","Notificar dependentes automaticamente em mudança.","Passar pedido por corrente de handlers até tratado."]},
  {q:"Selecione o cenário que melhor justifica <strong>Template Method</strong>:", o:["Classe de jogo com etapas fixas","Criar kits de UI consistentes para temas claro e escuro","Painel de cotações de ações","Checkpoint de jogo"]},
  {q:"Qual benefício caracteriza o padrão <em>Template Method</em>?", o:["Reutiliza fluxo comum evitando duplicação","Trata objetos individuais e composições uniformemente","Implementa comunicação reativa","Garante consistência entre objetos de uma família"]},
  {q:"Qual padrão é definido como: \"<em>Definir esqueleto de algoritmo delegando passos.</em>\"?", o:["Template Method","Decorator","Proxy","Facade"]},
  {q:"Qual padrão é MAIS adequado ao cenário: \"Classe de jogo com etapas fixas\"?", o:["Template Method","Observer","Memento","Builder"]},
  {q:"O padrão <strong>Visitor</strong> pertence a qual categoria GoF?", o:["Comportamental","Criacional","Estrutural"]},
  {q:"Qual é a intenção principal do padrão <em>Visitor</em>?", o:["Adicionar operação a elementos sem alterar classes.","Interpretar sentenças em linguagem formal definida.","Adicionar responsabilidades a objeto dinamicamente.","Separar construção de objeto complexo da representação."]},
  {q:"Selecione o cenário que melhor justifica <strong>Visitor</strong>:", o:["Exportar árvore de nós para XML","Criar documentos PDF ou HTML dinamicamente","Método `submitOrder()` que coordena múltiplos serviços","Gerenciar um pool único de conexões ao banco"]},
  {q:"Qual benefício caracteriza o padrão <em>Visitor</em>?", o:["Separa algoritmos da estrutura de objetos","Elimina condicionais complexas","Reutiliza fluxo comum evitando duplicação","Economiza recursos evitando múltiplas instâncias"]},
  {q:"Qual padrão é definido como: \"<em>Adicionar operação a elementos sem alterar classes.</em>\"?", o:["Visitor","Abstract Factory","Command","Builder"]},
  {q:"Qual padrão é MAIS adequado ao cenário: \"Exportar árvore de nós para XML\"?", o:["Visitor","Factory Method","Bridge","Composite"]},
  {q:"Qual dos seguintes padrões é <strong>Criacional</strong>?", o:["Singleton","Observer","Flyweight","Decorator"]},
  {q:"Qual dos seguintes padrões é <strong>Criacional</strong>?", o:["Factory Method","State","Flyweight","Chain of Responsibility"]},
  {q:"Qual dos seguintes padrões é <strong>Criacional</strong>?", o:["Abstract Factory","Flyweight","Decorator","Observer"]},
  {q:"Qual dos seguintes padrões é <strong>Criacional</strong>?", o:["Builder","Memento","Interpreter","Command"]},
  {q:"Qual dos seguintes padrões é <strong>Criacional</strong>?", o:["Prototype","Strategy","Iterator","Decorator"]},
  {q:"Qual dos seguintes padrões é <strong>Estrutural</strong>?", o:["Adapter","Command","Memento","Chain of Responsibility"]},
  {q:"Qual dos seguintes padrões é <strong>Estrutural</strong>?", o:["Bridge","Factory Method","Singleton","Template Method"]},
  {q:"Qual dos seguintes padrões é <strong>Estrutural</strong>?", o:["Composite","Mediator","Observer","Visitor"]},
  {q:"Qual dos seguintes padrões é <strong>Estrutural</strong>?", o:["Decorator","Memento","Interpreter","Command"]},
  {q:"Qual dos seguintes padrões é <strong>Estrutural</strong>?", o:["Facade","Memento","Command","Factory Method"]},
  {q:"Qual dos seguintes padrões é <strong>Estrutural</strong>?", o:["Flyweight","Abstract Factory","Template Method","Chain of Responsibility"]},
  {q:"Qual dos seguintes padrões é <strong>Estrutural</strong>?", o:["Proxy","Template Method","Factory Method","Prototype"]},
  {q:"Qual dos seguintes padrões é <strong>Comportamental</strong>?", o:["Chain of Responsibility","Builder","Facade","Decorator"]},
  {q:"Qual dos seguintes padrões é <strong>Comportamental</strong>?", o:["Command","Proxy","Composite","Adapter"]},
  {q:"Qual dos seguintes padrões é <strong>Comportamental</strong>?", o:["Interpreter","Prototype","Abstract Factory","Decorator"]},
  {q:"Qual dos seguintes padrões é <strong>Comportamental</strong>?", o:["Iterator","Builder","Prototype","Proxy"]},
  {q:"Qual dos seguintes padrões é <strong>Comportamental</strong>?", o:["Mediator","Builder","Adapter","Factory Method"]},
  {q:"Qual dos seguintes padrões é <strong>Comportamental</strong>?", o:["Memento","Prototype","Factory Method","Composite"]},
  {q:"Qual dos seguintes padrões é <strong>Comportamental</strong>?", o:["Observer","Factory Method","Flyweight","Facade"]},
  {q:"Qual dos seguintes padrões é <strong>Comportamental</strong>?", o:["State","Flyweight","Adapter","Builder"]},
  {q:"Qual dos seguintes padrões é <strong>Comportamental</strong>?", o:["Strategy","Bridge","Prototype","Singleton"]},
  {q:"Qual dos seguintes padrões é <strong>Comportamental</strong>?", o:["Template Method","Adapter","Abstract Factory","Proxy"]},
  {q:"Qual dos seguintes padrões é <strong>Comportamental</strong>?", o:["Visitor","Facade","Prototype","Builder"]},
  {q:"Qual é um alias comum para o padrão <em>Singleton</em>?", o:["Instância Única","Chain of Command","Surrogate","Fluent Builder"]},
  {q:"Qual é um alias comum para o padrão <em>Builder</em>?", o:["Fluent Builder","Policy","Sharing","Publish/Subscribe"]},
  {q:"Qual é um alias comum para o padrão <em>Prototype</em>?", o:["Clone","Policy","Wrapper","Chain of Command"]},
  {q:"Qual é um alias comum para o padrão <em>Decorator</em>?", o:["Wrapper","Objects for States","Surrogate","Chain of Command"]},
  {q:"Qual é um alias comum para o padrão <em>Facade</em>?", o:["Wrapper","Chain of Command","Publish/Subscribe","Sharing"]},
  {q:"Qual é um alias comum para o padrão <em>Flyweight</em>?", o:["Sharing","Objects for States","Double Dispatch","Wrapper"]},
  {q:"Qual é um alias comum para o padrão <em>Proxy</em>?", o:["Surrogate","Wrapper","Instância Única","Chain of Command"]},
  {q:"Qual é um alias comum para o padrão <em>Chain of Responsibility</em>?", o:["Chain of Command","Surrogate","Clone","Instância Única"]},
  {q:"Qual é um alias comum para o padrão <em>Observer</em>?", o:["Publish/Subscribe","Surrogate","Policy","Sharing"]},
  {q:"Qual é um alias comum para o padrão <em>State</em>?", o:["Objects for States","Instância Única","Fluent Builder","Clone"]},
  {q:"Qual é um alias comum para o padrão <em>Strategy</em>?", o:["Policy","Double Dispatch","Chain of Command","Surrogate"]},
  {q:"Qual é um alias comum para o padrão <em>Visitor</em>?", o:["Double Dispatch","Sharing","Objects for States","Instância Única"]},
  {q:"O padrão <strong>Singleton</strong> é frequentemente combinado com qual outro padrão?", o:["Facade","Prototype","Observer","Factory Method"]},
  {q:"O padrão <strong>Factory Method</strong> é frequentemente combinado com qual outro padrão?", o:["Abstract Factory","Proxy","Strategy","Visitor"]},
  {q:"O padrão <strong>Builder</strong> é frequentemente combinado com qual outro padrão?", o:["Director (cliente)","Memento","Visitor","Bridge"]},
  {q:"O padrão <strong>Prototype</strong> é frequentemente combinado com qual outro padrão?", o:["Factory Method","Bridge","Flyweight","Interpreter"]},
  {q:"O padrão <strong>Adapter</strong> é frequentemente combinado com qual outro padrão?", o:["Bridge","Observer","Adapter","Factory Method"]},
  {q:"O padrão <strong>Bridge</strong> é frequentemente combinado com qual outro padrão?", o:["Adapter","Visitor","Decorator","Facade"]},
  {q:"O padrão <strong>Composite</strong> é frequentemente combinado com qual outro padrão?", o:["Visitor","Abstract Factory","Template Method","Interpreter"]},
  {q:"O padrão <strong>Decorator</strong> é frequentemente combinado com qual outro padrão?", o:["Composite","Interpreter","Observer","Facade"]},
  {q:"O padrão <strong>Facade</strong> é frequentemente combinado com qual outro padrão?", o:["Mediator","Observer","Interpreter","Singleton"]},
  {q:"O padrão <strong>Flyweight</strong> é frequentemente combinado com qual outro padrão?", o:["Proxy","Command","Flyweight","Adapter"]},
  {q:"O padrão <strong>Proxy</strong> é frequentemente combinado com qual outro padrão?", o:["Lazy Initialization","Decorator","Iterator","Singleton"]},
  {q:"O padrão <strong>Chain of Responsibility</strong> é frequentemente combinado com qual outro padrão?", o:["Command","Template Method","Interpreter","State"]},
  {q:"O padrão <strong>Command</strong> é frequentemente combinado com qual outro padrão?", o:["Memento","Singleton","Factory Method","Proxy"]},
  {q:"O padrão <strong>Interpreter</strong> é frequentemente combinado com qual outro padrão?", o:["Visitor","Observer","Prototype","Decorator"]},
  {q:"O padrão <strong>Iterator</strong> é frequentemente combinado com qual outro padrão?", o:["Composite","Facade","Command","State"]},
  {q:"O padrão <strong>Mediator</strong> é frequentemente combinado com qual outro padrão?", o:["Observer","Chain of Responsibility","Adapter","Strategy"]},
  {q:"O padrão <strong>Memento</strong> é frequentemente combinado com qual outro padrão?", o:["Command","Abstract Factory","Composite","Mediator"]},
  {q:"O padrão <strong>Observer</strong> é frequentemente combinado com qual outro padrão?", o:["Mediator","Singleton","Adapter","Memento"]},
  {q:"O padrão <strong>State</strong> é frequentemente combinado com qual outro padrão?", o:["Strategy","Flyweight","Mediator","Template Method"]},
  {q:"O padrão <strong>Strategy</strong> é frequentemente combinado com qual outro padrão?", o:["State","Interpreter","Visitor","Template Method"]},
  {q:"O padrão <strong>Template Method</strong> é frequentemente combinado com qual outro padrão?", o:["Factory Method","Decorator","Proxy","Mediator"]},
  {q:"O padrão <strong>Visitor</strong> é frequentemente combinado com qual outro padrão?", o:["Composite","Visitor","Mediator","Decorator"]},
  {q:"O padrão <strong>Abstract Factory</strong> é frequentemente combinado com qual outro padrão?", o:["Builder","Interpreter","Proxy","Observer"]},
  {q:"A descrição \"<em>Encapsular família de algoritmos intercambiáveis.</em>\" corresponde a qual padrão?", o:["Strategy","Composite","Factory Method","Abstract Factory"]},
  {q:"A descrição \"<em>Encapsular interações entre objetos colegas.</em>\" corresponde a qual padrão?", o:["Mediator","Template Method","Proxy","Adapter"]},
  {q:"A descrição \"<em>Encapsular interações entre objetos colegas.</em>\" corresponde a qual padrão?", o:["Mediator","Bridge","Facade","Observer"]},
  {q:"A descrição \"<em>Substituir ou controlar acesso a objeto.</em>\" corresponde a qual padrão?", o:["Proxy","Adapter","Iterator","Strategy"]},
  {q:"A descrição \"<em>Fornecer interface para criar famílias de objetos relacionados.</em>\" corresponde a qual padrão?", o:["Abstract Factory","Prototype","Strategy","Memento"]},
  {q:"A descrição \"<em>Notificar dependentes automaticamente em mudança.</em>\" corresponde a qual padrão?", o:["Observer","Chain of Responsibility","Adapter","Prototype"]},
  {q:"A descrição \"<em>Adicionar responsabilidades a objeto dinamicamente.</em>\" corresponde a qual padrão?", o:["Decorator","Interpreter","Bridge","State"]},
  {q:"A descrição \"<em>Definir uma interface para criar um objeto, deixando subclasses decidir instância.</em>\" corresponde a qual padrão?", o:["Factory Method","Mediator","Visitor","Command"]},
  {q:"A descrição \"<em>Adicionar operação a elementos sem alterar classes.</em>\" corresponde a qual padrão?", o:["Visitor","Strategy","Proxy","Chain of Responsibility"]},
  {q:"A descrição \"<em>Encapsular interações entre objetos colegas.</em>\" corresponde a qual padrão?", o:["Mediator","Adapter","Observer","Factory Method"]},
  {q:"A descrição \"<em>Encapsular interações entre objetos colegas.</em>\" corresponde a qual padrão?", o:["Mediator","Abstract Factory","Decorator","Template Method"]},
  {q:"A descrição \"<em>Separar construção de objeto complexo da representação.</em>\" corresponde a qual padrão?", o:["Builder","Facade","Abstract Factory","Adapter"]},
  {q:"A descrição \"<em>Alterar comportamento quando estado muda.</em>\" corresponde a qual padrão?", o:["State","Visitor","Abstract Factory","Interpreter"]},
  {q:"A descrição \"<em>Compor objetos em estruturas árvore para parte‑todo.</em>\" corresponde a qual padrão?", o:["Composite","Command","Interpreter","Adapter"]},
  {q:"A descrição \"<em>Compartilhar objetos finos para economizar memória.</em>\" corresponde a qual padrão?", o:["Flyweight","Iterator","Prototype","Strategy"]},
  {q:"A descrição \"<em>Acessar elementos sequencialmente sem expor estrutura.</em>\" corresponde a qual padrão?", o:["Iterator","Bridge","Builder","Command"]},
  {q:"A descrição \"<em>Alterar comportamento quando estado muda.</em>\" corresponde a qual padrão?", o:["State","Memento","Command","Builder"]},
  {q:"A descrição \"<em>Definir esqueleto de algoritmo delegando passos.</em>\" corresponde a qual padrão?", o:["Template Method","Facade","Decorator","Composite"]},
  {q:"A descrição \"<em>Passar pedido por corrente de handlers até tratado.</em>\" corresponde a qual padrão?", o:["Chain of Responsibility","Observer","Singleton","Bridge"]},
  {q:"A descrição \"<em>Encapsular interações entre objetos colegas.</em>\" corresponde a qual padrão?", o:["Mediator","Interpreter","State","Singleton"]},
  {q:"A descrição \"<em>Garantir que uma classe tenha somente uma instância globalmente acessível.</em>\" corresponde a qual padrão?", o:["Singleton","Template Method","Strategy","Decorator"]},
  {q:"A descrição \"<em>Adicionar responsabilidades a objeto dinamicamente.</em>\" corresponde a qual padrão?", o:["Decorator","Bridge","Adapter","Flyweight"]},
  {q:"A descrição \"<em>Criar novos objetos clonando um protótipo existente.</em>\" corresponde a qual padrão?", o:["Prototype","Observer","Composite","Facade"]},
  {q:"A descrição \"<em>Fornecer interface simplificada a subsistema complexo.</em>\" corresponde a qual padrão?", o:["Facade","State","Decorator","Visitor"]},
  {q:"A descrição \"<em>Interpretar sentenças em linguagem formal definida.</em>\" corresponde a qual padrão?", o:["Interpreter","Adapter","Observer","Proxy"]},
  {q:"A descrição \"<em>Acessar elementos sequencialmente sem expor estrutura.</em>\" corresponde a qual padrão?", o:["Iterator","Command","Builder","Bridge"]},
  {q:"A descrição \"<em>Notificar dependentes automaticamente em mudança.</em>\" corresponde a qual padrão?", o:["Observer","Chain of Responsibility","Bridge","Facade"]},
  {q:"A descrição \"<em>Separar construção de objeto complexo da representação.</em>\" corresponde a qual padrão?", o:["Builder","Singleton","Prototype","State"]},
  {q:"A descrição \"<em>Garantir que uma classe tenha somente uma instância globalmente acessível.</em>\" corresponde a qual padrão?", o:["Singleton","Observer","Flyweight","Visitor"]},
  {q:"A descrição \"<em>Encapsular família de algoritmos intercambiáveis.</em>\" corresponde a qual padrão?", o:["Strategy","Prototype","Abstract Factory","Mediator"]},
  {q:"A descrição \"<em>Substituir ou controlar acesso a objeto.</em>\" corresponde a qual padrão?", o:["Proxy","State","Facade","Interpreter"]},
  {q:"A descrição \"<em>Encapsular interações entre objetos colegas.</em>\" corresponde a qual padrão?", o:["Mediator","Visitor","Proxy","Memento"]},
  {q:"A descrição \"<em>Compartilhar objetos finos para economizar memória.</em>\" corresponde a qual padrão?", o:["Flyweight","Singleton","Builder","Iterator"]},
  {q:"A descrição \"<em>Adicionar operação a elementos sem alterar classes.</em>\" corresponde a qual padrão?", o:["Visitor","Interpreter","Proxy","Facade"]},
  {q:"A descrição \"<em>Capturar estado interno para restaurar depois.</em>\" corresponde a qual padrão?", o:["Memento","Chain of Responsibility","Flyweight","Visitor"]},
  {q:"A descrição \"<em>Notificar dependentes automaticamente em mudança.</em>\" corresponde a qual padrão?", o:["Observer","Iterator","Builder","Template Method"]},
  {q:"A descrição \"<em>Passar pedido por corrente de handlers até tratado.</em>\" corresponde a qual padrão?", o:["Chain of Responsibility","Command","Bridge","Observer"]},
  {q:"A descrição \"<em>Garantir que uma classe tenha somente uma instância globalmente acessível.</em>\" corresponde a qual padrão?", o:["Singleton","Facade","Template Method","Strategy"]},
  {q:"A descrição \"<em>Encapsular interações entre objetos colegas.</em>\" corresponde a qual padrão?", o:["Mediator","Bridge","Interpreter","Strategy"]},
  {q:"A descrição \"<em>Encapsular interações entre objetos colegas.</em>\" corresponde a qual padrão?", o:["Mediator","Command","Facade","Adapter"]},
  {q:"A descrição \"<em>Interpretar sentenças em linguagem formal definida.</em>\" corresponde a qual padrão?", o:["Interpreter","Strategy","Visitor","Memento"]},
  {q:"A descrição \"<em>Desacoplar abstração da implementação para variar independentemente.</em>\" corresponde a qual padrão?", o:["Bridge","Chain of Responsibility","Memento","Singleton"]},
  {q:"A descrição \"<em>Definir esqueleto de algoritmo delegando passos.</em>\" corresponde a qual padrão?", o:["Template Method","Chain of Responsibility","Observer","Command"]},
  {q:"A descrição \"<em>Passar pedido por corrente de handlers até tratado.</em>\" corresponde a qual padrão?", o:["Chain of Responsibility","Flyweight","Strategy","State"]},
  {q:"A descrição \"<em>Adicionar operação a elementos sem alterar classes.</em>\" corresponde a qual padrão?", o:["Visitor","Abstract Factory","Iterator","Composite"]},
  {q:"A descrição \"<em>Encapsular família de algoritmos intercambiáveis.</em>\" corresponde a qual padrão?", o:["Strategy","Template Method","Facade","Singleton"]},
  {q:"A descrição \"<em>Encapsular solicitação como objeto.</em>\" corresponde a qual padrão?", o:["Command","Template Method","Prototype","Chain of Responsibility"]},
  {q:"A descrição \"<em>Adicionar responsabilidades a objeto dinamicamente.</em>\" corresponde a qual padrão?", o:["Decorator","Adapter","Abstract Factory","Strategy"]},
  {q:"A descrição \"<em>Garantir que uma classe tenha somente uma instância globalmente acessível.</em>\" corresponde a qual padrão?", o:["Singleton","Chain of Responsibility","Facade","Interpreter"]},
  {q:"A descrição \"<em>Definir esqueleto de algoritmo delegando passos.</em>\" corresponde a qual padrão?", o:["Template Method","Memento","Facade","Prototype"]},
  {q:"A descrição \"<em>Interpretar sentenças em linguagem formal definida.</em>\" corresponde a qual padrão?", o:["Interpreter","Decorator","Mediator","Adapter"]},
  {q:"A descrição \"<em>Interpretar sentenças em linguagem formal definida.</em>\" corresponde a qual padrão?", o:["Interpreter","Memento","Factory Method","Decorator"]},
  {q:"A descrição \"<em>Encapsular interações entre objetos colegas.</em>\" corresponde a qual padrão?", o:["Mediator","Builder","State","Command"]},
  {q:"A descrição \"<em>Fornecer interface para criar famílias de objetos relacionados.</em>\" corresponde a qual padrão?", o:["Abstract Factory","Chain of Responsibility","Builder","Visitor"]},
  {q:"A descrição \"<em>Interpretar sentenças em linguagem formal definida.</em>\" corresponde a qual padrão?", o:["Interpreter","Singleton","Adapter","Memento"]},
  {q:"A descrição \"<em>Adicionar operação a elementos sem alterar classes.</em>\" corresponde a qual padrão?", o:["Visitor","Adapter","Abstract Factory","Chain of Responsibility"]},
  {q:"A descrição \"<em>Encapsular família de algoritmos intercambiáveis.</em>\" corresponde a qual padrão?", o:["Strategy","Decorator","State","Facade"]},
  {q:"A descrição \"<em>Desacoplar abstração da implementação para variar independentemente.</em>\" corresponde a qual padrão?", o:["Bridge","Memento","Composite","Decorator"]},
  {q:"A descrição \"<em>Compartilhar objetos finos para economizar memória.</em>\" corresponde a qual padrão?", o:["Flyweight","Decorator","Abstract Factory","Memento"]},
  {q:"A descrição \"<em>Definir esqueleto de algoritmo delegando passos.</em>\" corresponde a qual padrão?", o:["Template Method","Proxy","Interpreter","Mediator"]},
  {q:"A descrição \"<em>Capturar estado interno para restaurar depois.</em>\" corresponde a qual padrão?", o:["Memento","Factory Method","Adapter","Facade"]},
  {q:"A descrição \"<em>Encapsular família de algoritmos intercambiáveis.</em>\" corresponde a qual padrão?", o:["Strategy","Memento","Decorator","Proxy"]},
  {q:"A descrição \"<em>Alterar comportamento quando estado muda.</em>\" corresponde a qual padrão?", o:["State","Composite","Chain of Responsibility","Memento"]},
  {q:"A descrição \"<em>Passar pedido por corrente de handlers até tratado.</em>\" corresponde a qual padrão?", o:["Chain of Responsibility","Adapter","Mediator","Decorator"]},
  {q:"A descrição \"<em>Alterar comportamento quando estado muda.</em>\" corresponde a qual padrão?", o:["State","Flyweight","Composite","Decorator"]},
  {q:"A descrição \"<em>Alterar comportamento quando estado muda.</em>\" corresponde a qual padrão?", o:["State","Composite","Visitor","Singleton"]},
  {q:"A descrição \"<em>Alterar comportamento quando estado muda.</em>\" corresponde a qual padrão?", o:["State","Chain of Responsibility","Flyweight","Command"]},
  {q:"A descrição \"<em>Compor objetos em estruturas árvore para parte‑todo.</em>\" corresponde a qual padrão?", o:["Composite","Facade","Bridge","Abstract Factory"]},
  {q:"A descrição \"<em>Encapsular família de algoritmos intercambiáveis.</em>\" corresponde a qual padrão?", o:["Strategy","Adapter","Observer","Interpreter"]},
  {q:"A descrição \"<em>Notificar dependentes automaticamente em mudança.</em>\" corresponde a qual padrão?", o:["Observer","Prototype","Strategy","Decorator"]},
  {q:"A descrição \"<em>Interpretar sentenças em linguagem formal definida.</em>\" corresponde a qual padrão?", o:["Interpreter","Memento","Adapter","Prototype"]},
  {q:"A descrição \"<em>Criar novos objetos clonando um protótipo existente.</em>\" corresponde a qual padrão?", o:["Prototype","Iterator","Chain of Responsibility","Flyweight"]},
  {q:"A descrição \"<em>Passar pedido por corrente de handlers até tratado.</em>\" corresponde a qual padrão?", o:["Chain of Responsibility","Composite","Builder","Bridge"]},
  {q:"A descrição \"<em>Adicionar operação a elementos sem alterar classes.</em>\" corresponde a qual padrão?", o:["Visitor","Template Method","Facade","Abstract Factory"]},
  {q:"A descrição \"<em>Separar construção de objeto complexo da representação.</em>\" corresponde a qual padrão?", o:["Builder","Decorator","Command","Proxy"]},
  {q:"A descrição \"<em>Acessar elementos sequencialmente sem expor estrutura.</em>\" corresponde a qual padrão?", o:["Iterator","Builder","Adapter","Factory Method"]},
  {q:"A descrição \"<em>Definir uma interface para criar um objeto, deixando subclasses decidir instância.</em>\" corresponde a qual padrão?", o:["Factory Method","Strategy","Singleton","Composite"]},
  {q:"A descrição \"<em>Definir esqueleto de algoritmo delegando passos.</em>\" corresponde a qual padrão?", o:["Template Method","Factory Method","Iterator","Mediator"]},
  {q:"A descrição \"<em>Alterar comportamento quando estado muda.</em>\" corresponde a qual padrão?", o:["State","Interpreter","Flyweight","Visitor"]},
  {q:"A descrição \"<em>Adicionar responsabilidades a objeto dinamicamente.</em>\" corresponde a qual padrão?", o:["Decorator","Builder","Strategy","Adapter"]},
  {q:"A descrição \"<em>Separar construção de objeto complexo da representação.</em>\" corresponde a qual padrão?", o:["Builder","Decorator","Command","Mediator"]},
  {q:"A descrição \"<em>Interpretar sentenças em linguagem formal definida.</em>\" corresponde a qual padrão?", o:["Interpreter","Chain of Responsibility","Adapter","Composite"]},
  {q:"A descrição \"<em>Compor objetos em estruturas árvore para parte‑todo.</em>\" corresponde a qual padrão?", o:["Composite","Flyweight","Iterator","Observer"]},
  {q:"A descrição \"<em>Notificar dependentes automaticamente em mudança.</em>\" corresponde a qual padrão?", o:["Observer","Chain of Responsibility","Bridge","Interpreter"]},
  {q:"A descrição \"<em>Adicionar operação a elementos sem alterar classes.</em>\" corresponde a qual padrão?", o:["Visitor","Decorator","Flyweight","Iterator"]},
  {q:"A descrição \"<em>Notificar dependentes automaticamente em mudança.</em>\" corresponde a qual padrão?", o:["Observer","Builder","Bridge","Abstract Factory"]},
  {q:"A descrição \"<em>Definir uma interface para criar um objeto, deixando subclasses decidir instância.</em>\" corresponde a qual padrão?", o:["Factory Method","Singleton","Mediator","Proxy"]},
  {q:"A descrição \"<em>Passar pedido por corrente de handlers até tratado.</em>\" corresponde a qual padrão?", o:["Chain of Responsibility","State","Facade","Bridge"]},
  {q:"A descrição \"<em>Passar pedido por corrente de handlers até tratado.</em>\" corresponde a qual padrão?", o:["Chain of Responsibility","Adapter","Template Method","Prototype"]},
  {q:"A descrição \"<em>Garantir que uma classe tenha somente uma instância globalmente acessível.</em>\" corresponde a qual padrão?", o:["Singleton","Factory Method","Command","Adapter"]},
  {q:"A descrição \"<em>Definir esqueleto de algoritmo delegando passos.</em>\" corresponde a qual padrão?", o:["Template Method","Memento","Factory Method","Observer"]},
  {q:"A descrição \"<em>Passar pedido por corrente de handlers até tratado.</em>\" corresponde a qual padrão?", o:["Chain of Responsibility","Decorator","Prototype","Abstract Factory"]},
  {q:"A descrição \"<em>Interpretar sentenças em linguagem formal definida.</em>\" corresponde a qual padrão?", o:["Interpreter","Template Method","Facade","Singleton"]},
  {q:"A descrição \"<em>Definir uma interface para criar um objeto, deixando subclasses decidir instância.</em>\" corresponde a qual padrão?", o:["Factory Method","Observer","Abstract Factory","Memento"]},
  {q:"A descrição \"<em>Criar novos objetos clonando um protótipo existente.</em>\" corresponde a qual padrão?", o:["Prototype","Factory Method","Facade","Builder"]},
  {q:"A descrição \"<em>Encapsular solicitação como objeto.</em>\" corresponde a qual padrão?", o:["Command","Abstract Factory","Bridge","Singleton"]},
  {q:"A descrição \"<em>Acessar elementos sequencialmente sem expor estrutura.</em>\" corresponde a qual padrão?", o:["Iterator","Template Method","Prototype","Decorator"]},
  {q:"A descrição \"<em>Definir esqueleto de algoritmo delegando passos.</em>\" corresponde a qual padrão?", o:["Template Method","Bridge","Visitor","Interpreter"]},
  {q:"A descrição \"<em>Passar pedido por corrente de handlers até tratado.</em>\" corresponde a qual padrão?", o:["Chain of Responsibility","Flyweight","Template Method","Decorator"]},
  {q:"A descrição \"<em>Adicionar responsabilidades a objeto dinamicamente.</em>\" corresponde a qual padrão?", o:["Decorator","Template Method","Composite","Factory Method"]},
  {q:"A descrição \"<em>Notificar dependentes automaticamente em mudança.</em>\" corresponde a qual padrão?", o:["Observer","State","Adapter","Proxy"]},
  {q:"A descrição \"<em>Encapsular solicitação como objeto.</em>\" corresponde a qual padrão?", o:["Command","Strategy","Observer","Template Method"]},
  {q:"A descrição \"<em>Encapsular interações entre objetos colegas.</em>\" corresponde a qual padrão?", o:["Mediator","Factory Method","Proxy","Observer"]},
  {q:"A descrição \"<em>Encapsular solicitação como objeto.</em>\" corresponde a qual padrão?", o:["Command","Observer","Bridge","Interpreter"]},
];
/* design-patterns-quiz.js – 100 perguntas, mostra 10 aleatórias; opções embaralhadas */

/* ---------- Config ---------- */
const TOTAL_PER_ROUND = 10;
const quiz = document.getElementById('quiz');

/* ---------- Estado ---------- */
const state = { idx:0, score:0, set:[] };

/* ---------- Helpers ---------- */
const clear = () => (quiz.innerHTML = '');
const flip  = el => { if(!el)return; el.classList.add('flip-enter'); setTimeout(()=>el.classList.add('flip-active'),10); setTimeout(()=>el.classList.remove('flip-enter','flip-active'),700); };
const shuffle = arr => arr.slice().sort(()=>Math.random()-0.5);

/* ---------- Fluxo ---------- */
function start(){
  state.set = shuffle(POOL).slice(0,TOTAL_PER_ROUND); // pega 10 diferentes
  state.idx = 0; state.score = 0;
  next();
}

function next(){
  const {q,o} = state.set[state.idx];

  /* embaralha as alternativas mantendo info de correta */
  const shuffled = shuffle(o.map((text,i)=>({text, correct:i===0})));

  clear();
  quiz.innerHTML = `
    <div class="quiz-card">
      <h2 class="quiz-question">Pergunta ${state.idx+1}/${TOTAL_PER_ROUND}</h2>
      <p  class="quiz-question">${q}</p>
      ${shuffled.map((alt,idx)=>`<button class="btn btn-option" data-idx="${idx}" data-corr="${alt.correct}">${alt.text}</button>`).join('')}
    </div>`;
  flip(quiz.firstElementChild);

  quiz.querySelectorAll('.btn-option').forEach(btn=>{
    btn.onclick = () =>{
      const correct = btn.dataset.corr === "true";
      if(correct){ btn.classList.add('correct'); state.score++; }
      else       { btn.classList.add('wrong'); quiz.querySelector('[data-corr="true"]').classList.add('correct'); }
      quiz.querySelectorAll('.btn-option').forEach(b=>b.disabled=true);
      setTimeout(()=>{ ++state.idx < TOTAL_PER_ROUND ? next() : result(); }, 800);
    };
  });
}

function result(){
  clear();
  const lvl = state.score <=3 ? "Básico" : state.score <=7 ? "Intermediário" : "Avançado";
  quiz.innerHTML = `
    <div class="quiz-card" style="text-align:center">
      <h2 class="quiz-title">Resultado</h2>
      <p class="quiz-result-main">${state.score}/${TOTAL_PER_ROUND} — ${lvl}</p>
      <p class="quiz-subtitle">Estude os padrões que você errou e tente novamente!</p>
      <button id="restart" class="btn btn-primary">Refazer</button>
    </div>`;
  flip(quiz.firstElementChild);
  document.getElementById('restart').onclick = start;
}

/* ---------- Boot ---------- */
document.addEventListener('DOMContentLoaded', start);
